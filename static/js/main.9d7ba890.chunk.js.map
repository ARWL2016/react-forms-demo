{"version":3,"sources":["components/List.tsx","core/data/static-data.tsx","core/entities/Person.tsx","core/data/api.tsx","core/utils.tsx","components/Basic/Basic.tsx","components/Validation/Form.tsx","components/Validation/Validation.tsx","components/Hooks/Hooks.tsx","components/Formik/FormikForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["List","props","style","className","onClick","onNew","Table","celled","Header","Row","HeaderCell","Body","personList","map","person","key","id","onEdit","Cell","title","name","gender","isPublic","TITLES","GENDERS","Person","this","uuidv4","personStore","seedData","getPersonList","json","window","localStorage","getItem","console","log","JSON","parse","savePerson","newPerson","list","index","findIndex","push","setItem","stringify","deletePerson","newList","filter","pick","object","keys","result","forEach","Basic","titles","genders","state","updatePersonList","setState","public","onDelete","onTitleChange","e","currentTarget","value","onNameChange","onGenderChange","onPublicChange","checked","onSubmit","formValue","Message","info","href","target","rel","as","onChange","undefined","type","Button","color","Component","FormControl","config","required","valid","touched","dirty","checkValidity","updateFormControl","control","clone","Object","assign","checkFormValidity","controlNames","controlName","Validation","isFormValid","newTitle","newName","newGender","newIsPublic","onFormChange","genderLabel","disabled","Hooks","useState","setId","setTitle","setName","setGender","setIsPublic","setPersonList","useEffect","p","FormikForm","showForm","setShowForm","initialValues","editValues","setEditValues","values","preventDefault","onCancel","handleChange","handleReset","App","activeItem","menus","handleItemClick","data","Menu","attached","tabular","menu","Item","active","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"waA8CeA,EApCa,SAACC,GAGzB,OACE,yBAAKC,MAAO,CAAC,SAAY,UACvB,4BAAQC,UAAU,oBAAoBC,QAASH,EAAMI,OAArD,cACA,kBAACC,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAME,OAAP,KACE,kBAACF,EAAA,EAAMG,IAAP,KACE,kBAACH,EAAA,EAAMI,WAAP,cACA,kBAACJ,EAAA,EAAMI,WAAP,aACA,kBAACJ,EAAA,EAAMI,WAAP,eACA,kBAACJ,EAAA,EAAMI,WAAP,iBAIJ,kBAACJ,EAAA,EAAMK,KAAP,KACGV,EAAMW,WAAWC,KAAI,SAACC,GAAD,OACpB,kBAACR,EAAA,EAAMG,IAAP,CACEM,IAAKD,EAAOE,GACZZ,QAAS,kBAAMH,EAAMgB,OAAOH,KAE5B,kBAACR,EAAA,EAAMY,KAAP,KAAaJ,EAAOK,OACpB,kBAACb,EAAA,EAAMY,KAAP,KAAaJ,EAAOM,MACpB,kBAACd,EAAA,EAAMY,KAAP,KAAaJ,EAAOO,QACpB,kBAACf,EAAA,EAAMY,KAAP,KACGJ,EAAOQ,SAAW,SAAW,oB,2BClCnCC,EAAkB,CAAC,KAAM,MAAO,KAAM,MACtCC,EAAoB,CAAC,OAAQ,SAAU,S,SCAvCC,EAST,WAAYN,EAAcC,EAAcC,EAAgBC,EAAmBN,GAAc,yBAPzFA,QAOwF,OANxFG,WAMwF,OALxFC,UAKwF,OAJxFC,YAIwF,OAHxFC,cAGwF,EACpFI,KAAKP,MAAQA,EACbO,KAAKN,KAAOA,EACZM,KAAKL,OAASA,EACdK,KAAKJ,SAAWA,EAChBI,KAAKV,GAAKA,GAAMW,eCflBC,EAAc,gCAEdC,EAAW,CACf,IAAIJ,EAAO,KAAM,kBAAmB,QAAQ,GAC5C,IAAIA,EAAO,KAAM,oBAAqB,UAAU,IAW3C,SAASK,IACd,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAGzC,OAFAO,QAAQC,IAAI,CAAEL,SAEVA,EACKM,KAAKC,MAAMP,GAEXF,EAIJ,SAASU,EAAWC,GACzB,IAAMC,EAAOX,IAEPY,EAAQD,EAAKE,WAAU,SAAC7B,GAAD,OAAYA,EAAOE,KAAOwB,EAAUxB,MAE7D0B,GAAS,EACXD,EAAKC,GAASF,EAEdC,EAAKG,KAAKJ,GAGZR,OAAOC,aAAaY,QAAQjB,EAAaS,KAAKS,UAAUL,IAGnD,SAASM,EAAa/B,GAC3B,IAEMgC,EAFOlB,IAEQmB,QAAO,SAACnC,GAAD,OAAYA,EAAOE,KAAOA,KAEtDgB,OAAOC,aAAaY,QAAQjB,EAAaS,KAAKS,UAAUE,IC/CnD,SAASE,IAAgD,IAA3CC,EAA0C,uDAAzB,GAAIC,EAAqB,uDAAJ,GAEjDC,EAAS,GAMf,OAJAD,EAAKE,SAAQ,SAAAvC,GACTsC,EAAOtC,GAAOoC,EAAOpC,MAGlBsC,E,IC+KIE,E,4MA5KbC,OAASjC,E,EACTkC,QAAUjC,E,EAEVkC,MAAQ,CACNvC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,UAAU,EACVN,GAAI,KACJJ,WAAY,I,EAOd+C,iBAAmB,WACjB,IAAM/C,EAAakB,IACnB,EAAK8B,SAAS,CAAEhD,gB,EAGlBP,MAAQ,WACN,EAAKuD,SAAS,CACZzC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRwC,QAAQ,EACR7C,GAAI,Q,EAIRC,OAAS,SAACH,GACR,EAAK8C,SAAL,eACK9C,K,EAIPgD,SAAW,WACL,EAAKJ,MAAM1C,KACb+B,EAAa,EAAKW,MAAM1C,IACxB,EAAK2C,mBACL,EAAKtD,U,EAIT0D,cAAgB,SAACC,GACf,EAAKJ,SAAS,CAAEzC,MAAO6C,EAAEC,cAAcC,S,EAGzCC,aAAe,SAACH,GACd,EAAKJ,SAAS,CAAExC,KAAM4C,EAAEC,cAAcC,S,EAGxCE,eAAiB,SAACJ,GAChB,EAAKJ,SAAS,CAAEvC,OAAQ2C,EAAEC,cAAcC,S,EAG1CG,eAAiB,SAACL,GAChB,EAAKJ,SAAS,CAAEtC,SAAU0C,EAAEC,cAAcK,W,EAG5CC,SAAW,WACT,IAAMC,EAAYtB,EAAK,EAAKQ,MAAO,CACjC,QACA,OACA,SACA,WACA,OAGmB,OAAjBc,EAAUxD,KACZwD,EAAUxD,GAAKW,eAEjBY,EAAWiC,GACX,EAAKb,mBACL,EAAKtD,S,kEA9DLqB,KAAKiC,qB,+BAiEG,IAAD,OACP,OACE,yBAAKxD,UAAU,uBACb,kBAAC,EAAD,CACEc,OAAQS,KAAKT,OACbZ,MAAOqB,KAAKrB,MACZO,WAAYc,KAAKgC,MAAM9C,aAGzB,kBAAC6D,EAAA,EAAD,CAASC,MAAI,GACX,kBAACD,EAAA,EAAQjE,OAAT,mBACA,6PAMA,uFACA,uBAAGmE,KAAK,0FAA0FC,OAAO,SAASC,IAAI,uBAAtH,gBAGF,8BACE,kBAACrE,EAAA,EAAD,CAAQsE,GAAG,MACRpD,KAAKgC,MAAM1C,GAAK,cAAgB,cAGnC,yBAAKb,UAAU,gBACb,wCACA,4BACE+D,MAAOxC,KAAKgC,MAAMvC,MAClB4D,SAAUrD,KAAKqC,eAEf,4BAAQhD,IAAI,UAAUmD,WAAOc,IAC5BtD,KAAK8B,OAAO3C,KAAI,SAACM,GAAD,OACf,4BAAQJ,IAAKI,EAAO+C,MAAO/C,GACxBA,QAMT,yBAAKhB,UAAU,gBACb,uCACA,2BACEA,UAAU,WACV+D,MAAOxC,KAAKgC,MAAMtC,KAClB2D,SAAUrD,KAAKyC,gBAInB,yBAAKhE,UAAU,gBACb,yCACA,6BACGuB,KAAK+B,QAAQ5C,KAAI,SAACQ,GAAD,OAChB,2BAAON,IAAKM,EAAQlB,UAAU,eAC5B,2BACE8E,KAAK,QACLf,MAAO7C,EACPiD,QAAS,EAAKZ,MAAMrC,SAAWA,EAC/B0D,SAAU,EAAKX,iBAEhB/C,QAMT,yBAAKlB,UAAU,gBACb,sDACA,2BACE8E,KAAK,WACLf,MAAM,OACNa,SAAUrD,KAAK2C,eACfC,QAAS5C,KAAKgC,MAAMpC,aAK1B,yBAAKnB,UAAU,oBACb,kBAAC+E,EAAA,EAAD,CAAQC,MAAM,MAAM/E,QAASsB,KAAKoC,UAAlC,UAGA,kBAACoB,EAAA,EAAD,CAAQC,MAAM,OAAO/E,QAASsB,KAAKrB,OAAnC,UAGA,kBAAC6E,EAAA,EAAD,CAAQC,MAAM,OAAO/E,QAASsB,KAAK6C,UAAnC,c,GApKUa,aCVPC,G,OAQT,WAAYC,GAA6B,yBANzCpB,WAAuBc,EAMiB,KALxCO,UAAW,EAK6B,KAJxCC,OAAQ,EAIgC,KAHxCC,SAAU,EAG8B,KAFxCC,OAAQ,EAIAJ,IACA5D,KAAKwC,MAAQoB,EAAO,GACpB5D,KAAK6D,SAAWD,EAAO,KAAM,GAGjC5D,KAAK8D,MAAQG,EAAcjE,QAM5B,SAASkE,EAAkBC,EAA2B3B,GACzD,IAAM4B,EAAQC,OAAOC,OAAO,GAAIH,GAOhC,OALAC,EAAM5B,MAAQA,EACd4B,EAAMJ,OAAQ,EACdI,EAAML,SAAU,EAChBK,EAAMN,MAAQG,EAAcG,GAErBA,EAGJ,SAASH,EAAcE,GAC1B,OAAyB,IAArBA,EAAQN,UAGc,OAAlBM,EAAQ3B,YAAoCc,IAAlBa,EAAQ3B,OAAyC,KAAlB2B,EAAQ3B,MAQtE,SAAS+B,EAAkBvC,EAAewC,GAC7C,IAAIV,GAAQ,EAQZ,OANCU,GAAgB,IAAI5C,SAAQ,SAAA6C,IACQ,IAA7BzC,EAAMyC,GAAaX,QACnBA,GAAQ,MAITA,E,IC8LIY,E,4MA7Nb5C,OAASjC,E,EACTkC,QAAUjC,E,EAEVkC,MAAe,CACbvC,MAAO,IAAIkE,EAAY,CAAC,IAAI,IAC5BjE,KAAM,IAAIiE,EAAY,CAAC,IAAI,IAC3BhE,OAAQ,IAAIgE,EAAY,CAAC,SAAS,IAClC/D,SAAU,IAAI+D,EAAY,EAAC,GAAO,IAClCrE,GAAI,KACJJ,WAAY,GACZ4E,OAAO,EACPE,OAAO,G,EAQT/B,iBAAmB,WACjB,IAAM/C,EAAakB,IACnB,EAAK8B,SAAS,CAAEhD,gB,EAGlBP,MAAQ,WACN,EAAKuD,SAAS,CACZzC,MAAO,IAAIkE,EAAY,CAAC,IAAI,IAC5BjE,KAAM,IAAIiE,EAAY,CAAC,IAAI,IAC3BhE,OAAQ,IAAIgE,EAAY,CAAC,SAAS,IAClC/D,SAAU,IAAI+D,EAAY,EAAC,GAAO,IAClCrE,GAAI,KACJwE,OAAO,K,EAIXvE,OAAS,SAACH,GAGR,EAAK8C,SAAS,CACZzC,MAAO,IAAIkE,EAAY,CAACvE,EAAOK,OAAO,IACtCC,KAAM,IAAIiE,EAAY,CAACvE,EAAOM,MAAM,IACpCC,OAAQ,IAAIgE,EAAY,CAACvE,EAAOO,QAAQ,IACxCC,SAAU,IAAI+D,EAAY,CAACvE,EAAOQ,UAAU,IAC5CN,GAAIF,EAAOE,GACXwE,OAAO,EACPE,OAAO,IACN,WACD,EAAKW,kB,EAITvC,SAAW,WACL,EAAKJ,MAAM1C,KACb+B,EAAa,EAAKW,MAAM1C,IACxB,EAAK2C,mBACL,EAAKtD,U,EAIT0D,cAAgB,SAACC,GACf,IAAMsC,EAAWV,EAAkB,EAAKlC,MAAMvC,MAAO6C,EAAEC,cAAcC,OACrE,EAAKN,SAAS,CAAEzC,MAAOmF,IAAY,kBAAM,EAAKD,kB,EAGhDlC,aAAe,SAACH,GACd,IAAMuC,EAAUX,EAAkB,EAAKlC,MAAMvC,MAAO6C,EAAEC,cAAcC,OACpE,EAAKN,SAAS,CAAExC,KAAMmF,IAAW,kBAAM,EAAKF,kB,EAG9CjC,eAAiB,SAACJ,GAChB,IAAMwC,EAAYZ,EAChB,EAAKlC,MAAMrC,OACX2C,EAAEC,cAAcC,OAElB,EAAKN,SAAS,CAAEvC,OAAQmF,K,EAG1BnC,eAAiB,SAACL,GAChB,IAAMyC,EAAcb,EAClB,EAAKlC,MAAMrC,OACX2C,EAAEC,cAAcK,SAElB,EAAKV,SAAS,CAAEtC,SAAUmF,K,EAG5BJ,YAAc,WACZ,IAAMb,EAAQS,EAAkB,EAAKvC,MAAO,CAC1C,QACA,OACA,SACA,aAEF,EAAKE,SAAS,CAAE4B,UAAS,kBAAMrD,QAAQC,IAAI,EAAKsB,W,EAGlDgD,aAAe,WACb,EAAK9C,SAAS,CAAE8B,OAAO,IAAQ,kBAAMvD,QAAQC,IAAI,EAAKsB,W,EAGxDa,SAAW,WACT,IAAMC,EAAY,CAChBrD,MAAO,EAAKuC,MAAMvC,MAAM+C,MACxB9C,KAAM,EAAKsC,MAAMtC,KAAK8C,MACtB7C,OAAQ,EAAKqC,MAAMrC,OAAO6C,MAC1B5C,SAAU,EAAKoC,MAAMpC,SAAS4C,MAC9BlD,GAAI,EAAK0C,MAAM1C,IAGI,OAAjBwD,EAAUxD,KACZwD,EAAUxD,GAAKW,eAGjBY,EAAWiC,GACX,EAAKb,mBACL,EAAKtD,S,kEAnGL,IAAMO,EAAakB,IACnBJ,KAAKkC,SAAS,CAAEhD,WAAYA,M,+BAqGpB,IAAD,SACqDc,KAAKgC,MAAzDvC,EADD,EACCA,MAAOC,EADR,EACQA,KAAMJ,EADd,EACcA,GAAIK,EADlB,EACkBA,OAAQC,EAD1B,EAC0BA,SAAUkE,EADpC,EACoCA,MAAOE,EAD3C,EAC2CA,MAElD,OACE,yBAAKvF,UAAU,uBACb,kBAAC,EAAD,CACEc,OAAQS,KAAKT,OACbZ,MAAOqB,KAAKrB,MACZO,WAAYc,KAAKgC,MAAM9C,aAGzB,kBAAC6D,EAAA,EAAD,CAASC,MAAI,GACX,kBAACD,EAAA,EAAQjE,OAAT,6BACA,sLACA,uBAAGmE,KAAK,oGAAoGC,OAAO,SAASC,IAAI,uBAAhI,gBAGF,0BAAME,SAAUrD,KAAKgF,cACnB,kBAAClG,EAAA,EAAD,CAAQsE,GAAG,MACRpD,KAAKgC,MAAM1C,GAAK,cAAgB,cAGnC,yBAAKb,UAAU,gBACb,wCACA,6BACE,4BACEiB,KAAK,OACL8C,MAAO/C,EAAM+C,MACba,SAAUrD,KAAKqC,eAEf,4BAAQhD,IAAI,UAAUmD,WAAOc,IAC5BtD,KAAK8B,OAAO3C,KAAI,SAACM,GAAD,OACf,4BAAQJ,IAAKI,EAAO+C,MAAO/C,GACxBA,QAILA,EAAMqE,OAASrE,EAAMsE,SACrB,uBAAGtF,UAAU,mBAAb,uBAKN,yBAAKA,UAAU,gBACb,uCACA,6BACE,2BACEA,UAAU,WACV+D,MAAO9C,EAAK8C,MACZa,SAAUrD,KAAKyC,gBAEf/C,EAAKoE,OAASpE,EAAKqE,SACnB,uBAAGtF,UAAU,mBAAb,sBAKN,yBAAKA,UAAU,gBACb,yCACA,6BACGuB,KAAK+B,QAAQ5C,KAAI,SAAC8F,GAAD,OAChB,2BAAO5F,IAAK4F,EAAaxG,UAAU,eACjC,2BACE8E,KAAK,QACLf,MAAOyC,EACPrC,QAASjD,EAAO6C,QAAUyC,EAC1B5B,SAAU,EAAKX,iBAEhBuC,QAMT,yBAAKxG,UAAU,gBACb,sDACA,2BACE8E,KAAK,WACLf,MAAM,OACNa,SAAUrD,KAAK2C,eACfC,QAAShD,EAAS4C,UAKxB,yBAAK/D,UAAU,oBACZa,GACC,kBAACkE,EAAA,EAAD,CAAQC,MAAM,MAAM/E,QAASsB,KAAKoC,UAAlC,UAKF,kBAACoB,EAAA,EAAD,CAAQC,MAAM,OAAO/E,QAASsB,KAAKrB,OAAnC,UAGA,kBAAC6E,EAAA,EAAD,CAAQC,MAAM,OAAO/E,QAASsB,KAAK6C,SAAUqC,UAAWpB,IAAUE,GAAlE,c,GArNeN,a,QCXZyB,G,OAAQ,WAAO,IAAD,EACLC,mBAAwB,MADnB,mBAClB9F,EADkB,KACd+F,EADc,OAECD,mBAAyB,IAF1B,mBAElB3F,EAFkB,KAEX6F,EAFW,OAGDF,mBAAiB,IAHhB,mBAGlB1F,EAHkB,KAGZ6F,EAHY,OAIGH,mBAAiB,SAJpB,mBAIlBzF,EAJkB,KAIV6F,EAJU,OAKOJ,oBAAkB,GALzB,mBAKlBxF,EALkB,KAKR6F,EALQ,OAMWL,mBAAmB,IAN9B,mBAMlBlG,EANkB,KAMNwG,EANM,KAYzB,SAASzD,IACP,IAAM/C,EAAakB,IACnBsF,EAAcxG,GAWhB,SAASwD,EAAeJ,GACtBkD,EAAUlD,EAAEC,cAAcC,OAO5B,SAAS7D,IACP0G,EAAM,MACNC,EAAS,IACTC,EAAQ,IACRC,EAAU,SACVC,GAAY,GAsCd,OApEAE,qBAAU,WACR1D,MACC,IAmED,yBAAKxD,UAAU,uBACb,kBAAC,EAAD,CAAMc,OArCV,SAAgBqG,GACdP,EAAMO,EAAEtG,IACRgG,EAASM,EAAEnG,OACX8F,EAAQK,EAAElG,MACV8F,EAAUI,EAAEjG,QACZ8F,EAAYG,EAAEhG,WAgCUjB,MAAOA,EAAOO,WAAYA,IAEhD,kBAAC6D,EAAA,EAAD,CAASC,MAAI,GACX,kBAACD,EAAA,EAAQjE,OAAT,oBACA,sIAGA,uBACEmE,KAAK,0FACLC,OAAO,SACPC,IAAI,uBAHN,gBAQF,8BACE,kBAACrE,EAAA,EAAD,CAAQsE,GAAG,MAAM9D,EAAK,cAAgB,cAEtC,yBAAKb,UAAU,gBACb,wCACA,4BAAQiB,KAAK,OAAO8C,MAAO/C,EAAO4D,SAjF1C,SAAuBf,GACrBgD,EAAShD,EAAEC,cAAcC,SAiFjB,4BAAQnD,IAAI,UAAUmD,WAAOc,IAC5BzD,EAAOV,KAAI,SAACM,GAAD,OACV,4BAAQJ,IAAKI,EAAO+C,MAAO/C,GACxBA,QAMT,yBAAKhB,UAAU,gBACb,uCACA,2BAAOA,UAAU,WAAW+D,MAAO9C,EAAM2D,SAzFjD,SAAsBf,GACpBiD,EAAQjD,EAAEC,cAAcC,WA2FpB,yBAAK/D,UAAU,gBACb,yCACA,6BACGqB,EAAQX,KAAI,SAAC8F,GAAD,OACX,2BAAO5F,IAAK4F,EAAaxG,UAAU,eACjC,2BACE8E,KAAK,QACLf,MAAOyC,EACPrC,QAASjD,IAAWsF,EACpB5B,SAAUX,IAEXuC,QAMT,yBAAKxG,UAAU,gBACb,sDACA,2BACE8E,KAAK,WACLf,MAAM,OACNa,SA1GV,SAAwBf,GACtBmD,EAAYnD,EAAEC,cAAcK,UA0GpBA,QAAShD,MAKf,yBAAKnB,UAAU,oBACb,kBAAC+E,EAAA,EAAD,CAAQC,MAAM,MAAM/E,QA7F1B,WACMY,IACF+B,EAAa/B,GACb2C,IACAtD,OAyFE,UAGA,kBAAC6E,EAAA,EAAD,CAAQC,MAAM,OAAO/E,QAASC,GAA9B,UAGA,kBAAC6E,EAAA,EAAD,CAAQC,MAAM,OAAO/E,QA3F3B,WACE,IAAMoE,EAAoB,CACxBpD,OACAD,QACAE,SACAC,WACAN,MAGmB,OAAjBwD,EAAUxD,KACZwD,EAAUxD,GAAKW,eAEjBQ,QAAQC,IAAIoC,GAEZjC,EAAWiC,GACXb,IACAtD,MA2EI,Y,SCyBOkH,G,OA7KI,WAAO,IAAD,EACaT,mBAAmB,IADhC,mBAChBlG,EADgB,KACJwG,EADI,OAESN,oBAAS,GAFlB,mBAEhBU,EAFgB,KAENC,EAFM,KAIjBC,EAAwB,CAC5BvG,MAAO,GACPC,KAAM,GACNC,OAAQ,QACRC,UAAU,EACVN,GAAI,MATiB,EAYa8F,mBAAiBY,GAZ9B,mBAYhBC,EAZgB,KAYJC,EAZI,KAsBvB,SAASjE,IACP,IAAM/C,EAAakB,IACnBsF,EAAcxG,GAGhB,SAAS2D,EAASsD,GACE,OAAdA,EAAO7G,KACT6G,EAAO7G,GAAKW,eAGdY,EAAWsF,GACX1F,QAAQC,IAAI,aAAcyF,GAC1BJ,GAAY,GACZG,EAAcF,GACd/D,IASF,SAAStD,IACPoH,GAAY,GACZG,EAAcF,GAGhB,SAAS5D,EAASE,EAAGhD,GACjBgD,EAAE8D,iBACF3F,QAAQC,IAAIpB,GAERA,IACF+B,EAAa/B,GACb2C,IACAtD,KAIN,SAAS0H,EAAS/D,GACdA,EAAE8D,iBACFzH,IAuFJ,OAxIAgH,qBAAU,WACR1D,MACC,IAEH0D,qBAAU,WACRI,GAAY,KACX,CAACE,IAmIF,yBAAKxH,UAAU,uBACb,kBAAC,EAAD,CAAMc,OAjHV,SAAgBqG,GACdnF,QAAQC,IAAI,WACZqF,GAAY,GACZG,EAAcN,IA8GUjH,MAAOA,EAAOO,WAAYA,IAEhD,kBAAC6D,EAAA,EAAD,CAASC,MAAI,GACX,kBAACD,EAAA,EAAQjE,OAAT,eACA,sFAGA,uBACEmE,KAAK,oGACLC,OAAO,SACPC,IAAI,uBAHN,gBA5FC8C,GAAeH,EAIlB,kBAAC,IAAD,CACEE,cAAeC,EACfpD,SAAUA,EACVT,SAAUA,EACViE,SAAUA,IAET,gBAAGF,EAAH,EAAGA,OAAQG,EAAX,EAAWA,aAAX,SAAyBC,YACxB,8BACE,yBAAK9H,UAAU,gBACb,wCACA,4BAAQiB,KAAK,QAAQ8C,MAAO2D,EAAO1G,MAAO4D,SAAUiD,GAClD,4BAAQjH,IAAI,UAAUmD,WAAOc,IAC5BzD,EAAOV,KAAI,SAACM,GAAD,OACV,4BAAQJ,IAAKI,EAAO+C,MAAO/C,GACxBA,QAMT,yBAAKhB,UAAU,gBACb,uCACA,2BACEiB,KAAK,OACLjB,UAAU,WACV+D,MAAO2D,EAAOzG,KACd2D,SAAUiD,KAId,yBAAK7H,UAAU,gBACb,yCACA,6BACGqB,EAAQX,KAAI,SAAC8F,GAAD,OACX,2BAAO5F,IAAK4F,EAAaxG,UAAU,eACjC,2BACEiB,KAAK,SACL6D,KAAK,QACLf,MAAOyC,EACPrC,QAASuD,EAAOxG,SAAWsF,EAC3B5B,SAAUiD,IAEXrB,QAMT,yBAAKxG,UAAU,gBACb,sDACA,2BACEiB,KAAK,WACL6D,KAAK,WACLf,MAAM,OACNa,SAAUiD,EACV1D,QAASuD,EAAOvG,YAIpB,yBAAKnB,UAAU,oBACb,kBAAC+E,EAAA,EAAD,CAAQC,MAAM,MAAM/E,QAAS,SAAC4D,GAAD,OAAOF,EAASE,EAAG6D,EAAO7G,MAAvD,UAGA,kBAACkE,EAAA,EAAD,CAAQC,MAAM,OAAO/E,QAAS,SAAC4D,GAAD,OAAO+D,EAAS/D,KAA9C,UAGA,kBAACkB,EAAA,EAAD,CACEC,MAAM,OACNF,KAAK,SACL7E,QAAS,kBAAMmE,EAASsD,KAH1B,aArED,QCxBEK,E,4MAvCbxE,MAAQ,CACNyE,WAAY,c,EAGdC,MAAQ,CAAC,aAAc,kBAAmB,QAAS,U,EAEnDC,gBAAkB,SAACC,GACjBnG,QAAQC,IAAIkG,GACZ,EAAK1E,SAAS,CAAEuE,WAAYG,EAAKlH,Q,uDAGzB,IAAD,OACC+G,EAAezG,KAAKgC,MAApByE,WACR,OACE,6BACE,kBAACI,EAAA,EAAD,CAAMC,SAAS,MAAMC,SAAO,GACzB/G,KAAK0G,MAAMvH,KAAI,SAAA6H,GAAI,OAClB,kBAACH,EAAA,EAAKI,KAAN,CACA5H,IAAK2H,EACLtH,KAAMsH,EACNE,OAAQT,IAAeO,EACvBtI,QAAS,SAAC4D,EAAGsE,GAAJ,OAAa,EAAKD,gBAAgBC,UAM/C,yBAAKnI,UAAU,qBACG,eAAfgI,GAA+B,kBAAC,EAAD,MAChB,oBAAfA,GAAoC,kBAAC,EAAD,MACrB,UAAfA,GAA0B,kBAAC,EAAD,MACX,WAAfA,GAA2B,kBAAC,EAAD,Y,GAhCpB/C,aCFEyD,QACW,cAA7B7G,OAAO8G,SAASC,UAEe,UAA7B/G,OAAO8G,SAASC,UAEhB/G,OAAO8G,SAASC,SAASC,MACvB,2D,ORRShH,OAAOC,aAAaC,QAAQN,IAGvCI,OAAOC,aAAaY,QAAQjB,EAAaS,KAAKS,UAAUjB,ISH5DoH,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzH,QAAQyH,MAAMA,EAAMC,c","file":"static/js/main.9d7ba890.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\nimport { Person } from \"../core/entities/Person\";\r\n\r\ninterface Props {\r\n  onEdit: (p: Person) => void;\r\n  onNew: () => void;\r\n  personList: Person[]\r\n}\r\n\r\nconst List: React.FC<any> = (props: Props) => {\r\n  // console.log(props.personList);\r\n\r\n    return (\r\n      <div style={{'maxWidth': '800px'}}>\r\n        <button className=\"ui primary button\" onClick={props.onNew}>Create New</button>\r\n        <Table celled>\r\n          <Table.Header>\r\n            <Table.Row>\r\n              <Table.HeaderCell>Title</Table.HeaderCell>\r\n              <Table.HeaderCell>Name</Table.HeaderCell>\r\n              <Table.HeaderCell>Gender</Table.HeaderCell>\r\n              <Table.HeaderCell>Public</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {props.personList.map((person: Person) => (\r\n              <Table.Row\r\n                key={person.id}\r\n                onClick={() => props.onEdit(person)}\r\n              >\r\n                <Table.Cell>{person.title}</Table.Cell>\r\n                <Table.Cell>{person.name}</Table.Cell>\r\n                <Table.Cell>{person.gender}</Table.Cell>\r\n                <Table.Cell>\r\n                  {person.isPublic ? \"public\" : \"private \"}\r\n                </Table.Cell>\r\n              </Table.Row>\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default List;\r\n","import { Title, Gender } from \"../types\";\r\n\r\nexport const TITLES: Title[] = [\"Mr\", \"Mrs\", \"Ms\", \"Dr\"];\r\nexport const GENDERS: Gender[] = [\"Male\", \"Female\", \"Other\"];","import { Title, Gender } from \"../types\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport class Person {\r\n\r\n    id: string | null\r\n    title: Title | string;\r\n    name: string;\r\n    gender: Gender;\r\n    isPublic: boolean;\r\n\r\n\r\n    constructor(title: Title, name: string, gender: Gender, isPublic: boolean, id?: string) {\r\n        this.title = title;\r\n        this.name = name;\r\n        this.gender = gender;\r\n        this.isPublic = isPublic;\r\n        this.id = id || uuidv4();\r\n    }\r\n}","import { Person } from \"../entities/Person\";\r\n\r\nconst personStore = \"react_forms_demo_person_store\";\r\n\r\nconst seedData = [\r\n  new Person(\"Mr\", \"John Richardson\", \"Male\", true),\r\n  new Person(\"Ms\", \"Samanthan Donahue\", \"Female\", false),\r\n];\r\n\r\nexport function init() {\r\n  const data = window.localStorage.getItem(personStore);\r\n\r\n  if (!data) {\r\n    window.localStorage.setItem(personStore, JSON.stringify(seedData));\r\n  }\r\n}\r\n\r\nexport function getPersonList(): Person[] {\r\n  const json = window.localStorage.getItem(personStore);\r\n  console.log({ json });\r\n\r\n  if (json) {\r\n    return JSON.parse(json);\r\n  } else {\r\n    return seedData;\r\n  }\r\n}\r\n\r\nexport function savePerson(newPerson: Person) {\r\n  const list = getPersonList();\r\n\r\n  const index = list.findIndex((person) => person.id === newPerson.id);\r\n\r\n  if (index > -1) {\r\n    list[index] = newPerson;\r\n  } else {\r\n    list.push(newPerson);\r\n  }\r\n\r\n  window.localStorage.setItem(personStore, JSON.stringify(list));\r\n}\r\n\r\nexport function deletePerson(id: string) {\r\n  const list = getPersonList();\r\n\r\n  const newList = list.filter((person) => person.id !== id);\r\n\r\n  window.localStorage.setItem(personStore, JSON.stringify(newList));\r\n}\r\n","export function pick(object: Object = {}, keys: string[] = []) {\r\n\r\n    const result = {};\r\n\r\n    keys.forEach(key => {\r\n        result[key] = object[key];\r\n    })\r\n\r\n    return result;\r\n}\r\n","import React, { Component, SyntheticEvent } from \"react\";\r\nimport \"./Basic.scss\";\r\nimport List from \"../List\";\r\nimport { Person } from \"../../core/entities/Person\";\r\nimport { Header, Message, Button } from \"semantic-ui-react\";\r\nimport { TITLES, GENDERS } from \"../../core/data/static-data\";\r\nimport { getPersonList, savePerson, deletePerson } from \"../../core/data/api\";\r\nimport { pick } from \"../../core/utils\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass Basic extends Component {\r\n  titles = TITLES;\r\n  genders = GENDERS;\r\n\r\n  state = {\r\n    title: \"\",\r\n    name: \"\",\r\n    gender: \"\",\r\n    isPublic: false,\r\n    id: null,\r\n    personList: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updatePersonList();\r\n  }\r\n\r\n  updatePersonList = () => {\r\n    const personList = getPersonList();\r\n    this.setState({ personList });\r\n  };\r\n\r\n  onNew = () => {\r\n    this.setState({\r\n      title: \"\",\r\n      name: \"\",\r\n      gender: \"\",\r\n      public: false,\r\n      id: null,\r\n    });\r\n  };\r\n\r\n  onEdit = (person: Person) => {\r\n    this.setState({\r\n      ...person,\r\n    });\r\n  };\r\n\r\n  onDelete = () => {\r\n    if (this.state.id) {\r\n      deletePerson(this.state.id!);\r\n      this.updatePersonList();\r\n      this.onNew();\r\n    }\r\n  };\r\n\r\n  onTitleChange = (e: SyntheticEvent<HTMLSelectElement>) => {\r\n    this.setState({ title: e.currentTarget.value });\r\n  };\r\n\r\n  onNameChange = (e: SyntheticEvent<HTMLInputElement>) => {\r\n    this.setState({ name: e.currentTarget.value });\r\n  };\r\n\r\n  onGenderChange = (e: SyntheticEvent<HTMLInputElement>) => {\r\n    this.setState({ gender: e.currentTarget.value });\r\n  };\r\n\r\n  onPublicChange = (e: SyntheticEvent<HTMLInputElement>) => {\r\n    this.setState({ isPublic: e.currentTarget.checked });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    const formValue = pick(this.state, [\r\n      \"title\",\r\n      \"name\",\r\n      \"gender\",\r\n      \"isPublic\",\r\n      \"id\",\r\n    ]) as Person;\r\n\r\n    if (formValue.id === null) {\r\n      formValue.id = uuidv4();\r\n    }\r\n    savePerson(formValue);\r\n    this.updatePersonList();\r\n    this.onNew();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-container\">\r\n        <List\r\n          onEdit={this.onEdit}\r\n          onNew={this.onNew}\r\n          personList={this.state.personList}\r\n        />\r\n\r\n        <Message info>\r\n          <Message.Header>Basic Form</Message.Header>\r\n          <p>\r\n            This form is written in a React class based component, using pure\r\n            HTML inputs. The table and buttons use Semantic-UI. Since there is\r\n            no validation, empty records can be created. Records are persisted\r\n            to local storage only.\r\n          </p>\r\n          <p>Click Create New or click on the table to edit a record.</p>\r\n          <a href=\"https://github.com/ARWL2016/react-forms-demo/blob/master/src/components/Basic/Basic.tsx\" target=\"_blank\" rel=\"noopener noreferrer\">View Source</a>\r\n        </Message>\r\n\r\n        <form>\r\n          <Header as=\"h3\">\r\n            {this.state.id ? \"Edit Person\" : \"Add Person\"}\r\n          </Header>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Title</label>\r\n            <select\r\n              value={this.state.title}\r\n              onChange={this.onTitleChange}\r\n            >\r\n              <option key=\"default\" value={undefined}></option>\r\n              {this.titles.map((title) => (\r\n                <option key={title} value={title}>\r\n                  {title}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Name</label>\r\n            <input\r\n              className=\"ui input\"\r\n              value={this.state.name}\r\n              onChange={this.onNameChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Gender</label>\r\n            <div>\r\n              {this.genders.map((gender) => (\r\n                <label key={gender} className=\"radio-label\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    value={gender}\r\n                    checked={this.state.gender === gender}\r\n                    onChange={this.onGenderChange}\r\n                  />\r\n                  {gender}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Make Profile Public</label>\r\n            <input\r\n              type=\"checkbox\"\r\n              value=\"true\"\r\n              onChange={this.onPublicChange}\r\n              checked={this.state.isPublic}\r\n            />\r\n          </div>\r\n        </form>\r\n\r\n        <div className=\"button-container\">\r\n          <Button color=\"red\" onClick={this.onDelete}>\r\n            Delete\r\n          </Button>\r\n          <Button color=\"grey\" onClick={this.onNew}>\r\n            Cancel\r\n          </Button>\r\n          <Button color=\"blue\" onClick={this.onSubmit}>\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Basic;\r\n","export class FormControl<T> {\r\n\r\n    value: T | undefined = undefined;\r\n    required = false;\r\n    valid = false;\r\n    touched = false;\r\n    dirty = false;\r\n\r\n    constructor(config?: FormControlConfig) {\r\n\r\n        if (config) {\r\n            this.value = config[0];\r\n            this.required = config[1] || false;\r\n        }\r\n       \r\n        this.valid = checkValidity(this)   \r\n    }\r\n}\r\n\r\nexport type FormControlConfig = [any, boolean?];\r\n\r\nexport function updateFormControl(control: FormControl<any>, value: any): FormControl<any> {\r\n    const clone = Object.assign({}, control);\r\n\r\n    clone.value = value;\r\n    clone.dirty = true;\r\n    clone.touched = true;\r\n    clone.valid = checkValidity(clone);\r\n    \r\n    return clone;\r\n}\r\n\r\nexport function checkValidity(control: FormControl<any>): boolean {\r\n    if (control.required === false) {\r\n        return true;\r\n    } else {\r\n        if (control.value !== null && control.value !== undefined && control.value !== '') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function checkFormValidity(state: Object, controlNames: string[]): boolean {\r\n    let valid = true;\r\n\r\n    (controlNames || []).forEach(controlName => {\r\n        if (state[controlName].valid === false) {\r\n            valid = false;\r\n        }\r\n    });\r\n\r\n    return valid;\r\n}\r\n\r\nexport function checkFormIsDirty(state: Object, controlNames: string[]): boolean {\r\n    let dirty = false;\r\n\r\n    (controlNames || []).forEach(controlName => {\r\n        if (state[controlName].dirty === true) {\r\n            dirty = true;\r\n        }\r\n    });\r\n\r\n    return dirty;\r\n}","import React, { Component, SyntheticEvent } from \"react\";\r\nimport \"./Validation.scss\";\r\nimport List from \"../List\";\r\nimport { Person } from \"../../core/entities/Person\";\r\nimport { Header, Message, Button } from \"semantic-ui-react\";\r\nimport { TITLES, GENDERS } from \"../../core/data/static-data\";\r\nimport { getPersonList, savePerson, deletePerson } from \"../../core/data/api\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FormControl, updateFormControl, checkFormValidity } from \"./Form\";\r\n\r\ninterface State {\r\n  title: FormControl<string>;\r\n  name: FormControl<string>;\r\n  gender: FormControl<string>;\r\n  isPublic: FormControl<boolean>;\r\n  id: string | null;\r\n  personList: Person[];\r\n  valid: boolean;\r\n  dirty: boolean;\r\n}\r\n\r\nclass Validation extends Component<{}, State> {\r\n  titles = TITLES;\r\n  genders = GENDERS;\r\n\r\n  state: State = {\r\n    title: new FormControl([\"\", true]),\r\n    name: new FormControl([\"\", true]),\r\n    gender: new FormControl([\"Other\", true]),\r\n    isPublic: new FormControl([false, true]),\r\n    id: null,\r\n    personList: [],\r\n    valid: false,\r\n    dirty: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const personList = getPersonList();\r\n    this.setState({ personList: personList });\r\n  }\r\n\r\n  updatePersonList = () => {\r\n    const personList = getPersonList();\r\n    this.setState({ personList });\r\n  };\r\n\r\n  onNew = () => {\r\n    this.setState({\r\n      title: new FormControl([\"\", true]),\r\n      name: new FormControl([\"\", true]),\r\n      gender: new FormControl([\"Other\", true]),\r\n      isPublic: new FormControl([false, true]),\r\n      id: null,\r\n      valid: false\r\n    });\r\n  };\r\n\r\n  onEdit = (person: Person) => {\r\n    \r\n\r\n    this.setState({\r\n      title: new FormControl([person.title, true]),\r\n      name: new FormControl([person.name, true]),\r\n      gender: new FormControl([person.gender, true]),\r\n      isPublic: new FormControl([person.isPublic, true]),\r\n      id: person.id,\r\n      valid: false, \r\n      dirty: false\r\n    }, () => {\r\n      this.isFormValid();\r\n    });\r\n  };\r\n\r\n  onDelete = () => {\r\n    if (this.state.id) {\r\n      deletePerson(this.state.id!);\r\n      this.updatePersonList();\r\n      this.onNew();\r\n    }\r\n  };\r\n\r\n  onTitleChange = (e: SyntheticEvent<HTMLSelectElement>) => {\r\n    const newTitle = updateFormControl(this.state.title, e.currentTarget.value);\r\n    this.setState({ title: newTitle }, () => this.isFormValid());\r\n  };\r\n\r\n  onNameChange = (e: SyntheticEvent<HTMLInputElement>) => {\r\n    const newName = updateFormControl(this.state.title, e.currentTarget.value);\r\n    this.setState({ name: newName }, () => this.isFormValid());\r\n  };\r\n\r\n  onGenderChange = (e: SyntheticEvent<HTMLInputElement>) => {\r\n    const newGender = updateFormControl(\r\n      this.state.gender,\r\n      e.currentTarget.value\r\n    );\r\n    this.setState({ gender: newGender });\r\n  };\r\n\r\n  onPublicChange = (e: SyntheticEvent<HTMLInputElement>) => {\r\n    const newIsPublic = updateFormControl(\r\n      this.state.gender,\r\n      e.currentTarget.checked\r\n    );\r\n    this.setState({ isPublic: newIsPublic });\r\n  };\r\n\r\n  isFormValid = () => {\r\n    const valid = checkFormValidity(this.state, [\r\n      \"title\",\r\n      \"name\",\r\n      \"gender\",\r\n      \"isPublic\",\r\n    ]);\r\n    this.setState({ valid }, () => console.log(this.state));\r\n  };\r\n\r\n  onFormChange = () => {\r\n    this.setState({ dirty: true }, () => console.log(this.state));\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const formValue = {\r\n      title: this.state.title.value,\r\n      name: this.state.name.value,\r\n      gender: this.state.gender.value,\r\n      isPublic: this.state.isPublic.value,\r\n      id: this.state.id,\r\n    } as Person;\r\n\r\n    if (formValue.id === null) {\r\n      formValue.id = uuidv4();\r\n    }\r\n\r\n    savePerson(formValue as Person);\r\n    this.updatePersonList();\r\n    this.onNew();\r\n  };\r\n\r\n  render() {\r\n    const { title, name, id, gender, isPublic, valid, dirty } = this.state;\r\n\r\n    return (\r\n      <div className=\"component-container\">\r\n        <List\r\n          onEdit={this.onEdit}\r\n          onNew={this.onNew}\r\n          personList={this.state.personList}\r\n        />\r\n\r\n        <Message info>\r\n          <Message.Header>Form with Validation</Message.Header>\r\n          <p>This form tracks the value, validity, and clean / dirty state of each control so that validation warnings can be shown and the buttons can be disabled.</p>\r\n          <a href=\"https://github.com/ARWL2016/react-forms-demo/blob/master/src/components/Validation/Validation.tsx\" target=\"_blank\" rel=\"noopener noreferrer\">View Source</a>\r\n        </Message>\r\n\r\n        <form onChange={this.onFormChange}>\r\n          <Header as=\"h3\">\r\n            {this.state.id ? \"Edit Person\" : \"Add Person\"}\r\n          </Header>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Title</label>\r\n            <div>\r\n              <select\r\n                name=\"cars\"\r\n                value={title.value}\r\n                onChange={this.onTitleChange}\r\n              >\r\n                <option key=\"default\" value={undefined}></option>\r\n                {this.titles.map((title) => (\r\n                  <option key={title} value={title}>\r\n                    {title}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {!title.valid && title.touched && (\r\n                <p className=\"invalid-message\">Title is required</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Name</label>\r\n            <div>\r\n              <input\r\n                className=\"ui input\"\r\n                value={name.value}\r\n                onChange={this.onNameChange}\r\n              />\r\n              {!name.valid && name.touched && (\r\n                <p className=\"invalid-message\">Name is required</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Gender</label>\r\n            <div>\r\n              {this.genders.map((genderLabel) => (\r\n                <label key={genderLabel} className=\"radio-label\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    value={genderLabel}\r\n                    checked={gender.value === genderLabel}\r\n                    onChange={this.onGenderChange}\r\n                  />\r\n                  {genderLabel}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label>Make Profile Public</label>\r\n            <input\r\n              type=\"checkbox\"\r\n              value=\"true\"\r\n              onChange={this.onPublicChange}\r\n              checked={isPublic.value}\r\n            />\r\n          </div>\r\n        </form>\r\n\r\n        <div className=\"button-container\">\r\n          {id && (\r\n            <Button color=\"red\" onClick={this.onDelete}>\r\n              Delete\r\n            </Button>\r\n          )}\r\n\r\n          <Button color=\"grey\" onClick={this.onNew}>\r\n            Cancel\r\n          </Button>\r\n          <Button color=\"blue\" onClick={this.onSubmit} disabled={!valid || !dirty}>\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Validation;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Header, Button, Message } from \"semantic-ui-react\";\r\nimport \"./Hooks.scss\";\r\nimport { TITLES, GENDERS } from \"../../core/data/static-data\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Person } from \"../../core/entities/Person\";\r\nimport { Title, Gender } from \"../../core/types\";\r\nimport { getPersonList, savePerson, deletePerson } from \"../../core/data/api\";\r\nimport List from \"../List\";\r\n\r\nexport const Hooks = () => {\r\n  const [id, setId] = useState<string | null>(null);\r\n  const [title, setTitle] = useState<Title | string>(\"\");\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [gender, setGender] = useState<Gender>(\"Other\");\r\n  const [isPublic, setIsPublic] = useState<boolean>(false);\r\n  const [personList, setPersonList] = useState<Person[]>([]);\r\n\r\n  useEffect(() => {\r\n    updatePersonList();\r\n  }, []);\r\n\r\n  function updatePersonList() {\r\n    const personList = getPersonList();\r\n    setPersonList(personList);\r\n  }\r\n\r\n  function onTitleChange(e) {\r\n    setTitle(e.currentTarget.value);\r\n  }\r\n\r\n  function onNameChange(e) {\r\n    setName(e.currentTarget.value);\r\n  }\r\n\r\n  function onGenderChange(e) {\r\n    setGender(e.currentTarget.value);\r\n  }\r\n\r\n  function onPublicChange(e) {\r\n    setIsPublic(e.currentTarget.checked);\r\n  }\r\n\r\n  function onNew() {\r\n    setId(null);\r\n    setTitle(\"\");\r\n    setName(\"\");\r\n    setGender(\"Other\");\r\n    setIsPublic(false);\r\n  }\r\n\r\n  function onEdit(p: Person) {\r\n    setId(p.id);\r\n    setTitle(p.title);\r\n    setName(p.name);\r\n    setGender(p.gender);\r\n    setIsPublic(p.isPublic);\r\n  }\r\n\r\n  function onDelete() {\r\n    if (id) {\r\n      deletePerson(id!);\r\n      updatePersonList();\r\n      onNew();\r\n    }\r\n  }\r\n\r\n  function onSubmit() {\r\n    const formValue: Person = {\r\n      name,\r\n      title,\r\n      gender,\r\n      isPublic,\r\n      id,\r\n    };\r\n\r\n    if (formValue.id === null) {\r\n      formValue.id = uuidv4();\r\n    }\r\n    console.log(formValue);\r\n\r\n    savePerson(formValue);\r\n    updatePersonList();\r\n    onNew();\r\n  }\r\n\r\n  return (\r\n    <div className=\"component-container\">\r\n      <List onEdit={onEdit} onNew={onNew} personList={personList} />\r\n\r\n      <Message info>\r\n        <Message.Header>Basic Hooks</Message.Header>\r\n        <p>\r\n          This is an alternative version of the basic form, using a functional component and the React Hooks API.\r\n        </p>\r\n        <a\r\n          href=\"https://github.com/ARWL2016/react-forms-demo/blob/master/src/components/Hooks/Hooks.tsx\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          View Source\r\n        </a>\r\n      </Message>\r\n      <form>\r\n        <Header as=\"h3\">{id ? \"Edit Person\" : \"Add Person\"}</Header>\r\n\r\n        <div className=\"form-control\">\r\n          <label>Title</label>\r\n          <select name=\"cars\" value={title} onChange={onTitleChange}>\r\n            <option key=\"default\" value={undefined}></option>\r\n            {TITLES.map((title) => (\r\n              <option key={title} value={title}>\r\n                {title}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label>Name</label>\r\n          <input className=\"ui input\" value={name} onChange={onNameChange} />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label>Gender</label>\r\n          <div>\r\n            {GENDERS.map((genderLabel) => (\r\n              <label key={genderLabel} className=\"radio-label\">\r\n                <input\r\n                  type=\"radio\"\r\n                  value={genderLabel}\r\n                  checked={gender === genderLabel}\r\n                  onChange={onGenderChange}\r\n                />\r\n                {genderLabel}\r\n              </label>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label>Make Profile Public</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            value=\"true\"\r\n            onChange={onPublicChange}\r\n            checked={isPublic}\r\n          />\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"button-container\">\r\n        <Button color=\"red\" onClick={onDelete}>\r\n          Delete\r\n        </Button>\r\n        <Button color=\"grey\" onClick={onNew}>\r\n          Cancel\r\n        </Button>\r\n        <Button color=\"blue\" onClick={onSubmit}>\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { TITLES, GENDERS } from \"../../core/data/static-data\";\r\nimport { Button, Message } from \"semantic-ui-react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { savePerson, getPersonList, deletePerson } from \"../../core/data/api\";\r\nimport { Person } from \"../../core/entities/Person\";\r\nimport List from \"../List\";\r\nimport './FormikForm.scss';\r\n\r\nconst FormikForm = () => {\r\n  const [personList, setPersonList] = useState<Person[]>([]);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const initialValues: Person = {\r\n    title: \"\",\r\n    name: \"\",\r\n    gender: \"Other\",\r\n    isPublic: false,\r\n    id: null,\r\n  };\r\n\r\n  const [editValues, setEditValues] = useState<Person>(initialValues);\r\n\r\n  useEffect(() => {\r\n    updatePersonList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setShowForm(true);\r\n  }, [editValues]);\r\n\r\n  function updatePersonList() {\r\n    const personList = getPersonList();\r\n    setPersonList(personList);\r\n  }\r\n\r\n  function onSubmit(values) {\r\n    if (values.id === null) {\r\n      values.id = uuidv4();\r\n    }\r\n\r\n    savePerson(values);\r\n    console.log(\"submitting\", values);\r\n    setShowForm(false);\r\n    setEditValues(initialValues);\r\n    updatePersonList();\r\n  }\r\n\r\n  function onEdit(p: Person) {\r\n    console.log(\"on edit\");\r\n    setShowForm(false);\r\n    setEditValues(p);\r\n  }\r\n\r\n  function onNew() {\r\n    setShowForm(false);\r\n    setEditValues(initialValues);\r\n  }\r\n\r\n  function onDelete(e, id) {\r\n      e.preventDefault();\r\n      console.log(id);\r\n\r\n      if (id) {\r\n        deletePerson(id!);\r\n        updatePersonList();\r\n        onNew();\r\n      }\r\n  }\r\n\r\n  function onCancel(e) {\r\n      e.preventDefault();\r\n      onNew();\r\n  }\r\n\r\n  function renderForm() {\r\n    if (!editValues || !showForm) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Formik\r\n        initialValues={editValues}\r\n        onSubmit={onSubmit}\r\n        onDelete={onDelete}\r\n        onCancel={onCancel}\r\n      >\r\n        {({ values, handleChange, handleReset }) => (\r\n          <form>\r\n            <div className=\"form-control\">\r\n              <label>Title</label>\r\n              <select name=\"title\" value={values.title} onChange={handleChange}>\r\n                <option key=\"default\" value={undefined}></option>\r\n                {TITLES.map((title) => (\r\n                  <option key={title} value={title}>\r\n                    {title}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n              <label>Name</label>\r\n              <input\r\n                name=\"name\"\r\n                className=\"ui input\"\r\n                value={values.name}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n              <label>Gender</label>\r\n              <div>\r\n                {GENDERS.map((genderLabel) => (\r\n                  <label key={genderLabel} className=\"radio-label\">\r\n                    <input\r\n                      name=\"gender\"\r\n                      type=\"radio\"\r\n                      value={genderLabel}\r\n                      checked={values.gender === genderLabel}\r\n                      onChange={handleChange}\r\n                    />\r\n                    {genderLabel}\r\n                  </label>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-control\">\r\n              <label>Make Profile Public</label>\r\n              <input\r\n                name=\"isPublic\"\r\n                type=\"checkbox\"\r\n                value=\"true\"\r\n                onChange={handleChange}\r\n                checked={values.isPublic}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"button-container\">\r\n              <Button color=\"red\" onClick={(e) => onDelete(e, values.id)}>\r\n                Delete\r\n              </Button>\r\n              <Button color=\"grey\" onClick={(e) => onCancel(e)}>\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                color=\"blue\"\r\n                type=\"submit\"\r\n                onClick={() => onSubmit(values)} >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"component-container\">\r\n      <List onEdit={onEdit} onNew={onNew} personList={personList} />\r\n\r\n      <Message info>\r\n        <Message.Header>Formik</Message.Header>\r\n        <p>\r\n          Version of basic form using Formik and React Hooks API.\r\n        </p>\r\n        <a\r\n          href=\"https://github.com/ARWL2016/react-forms-demo/blob/master/src/components/FormikForm/FormikForm.tsx\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          View Source\r\n        </a>\r\n      </Message>\r\n\r\n      {renderForm()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormikForm;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Menu, MenuItemProps } from \"semantic-ui-react\";\nimport Basic from \"./components/Basic/Basic\";\nimport Validation from \"./components/Validation/Validation\";\nimport { Hooks } from \"./components/Hooks/Hooks\";\nimport FormikForm from \"./components/Formik/FormikForm\";\n\nexport interface MenuArgs {\n  active: boolean;\n  name: string;\n  onClick: () => {};\n}\n\nclass App extends Component {\n  state = {\n    activeItem: \"Basic Form\",\n  };\n\n  menus = ['Basic Form', 'With Validation', 'Hooks', 'Formik'];\n\n  handleItemClick = (data: MenuItemProps) => {\n    console.log(data);\n    this.setState({ activeItem: data.name });\n  };\n\n  render() {\n    const { activeItem } = this.state;\n    return (\n      <div>\n        <Menu attached=\"top\" tabular>\n          {this.menus.map(menu => (\n            <Menu.Item\n            key={menu}\n            name={menu}\n            active={activeItem === menu}\n            onClick={(e, data) => this.handleItemClick(data)}\n          />\n          ) )}\n         \n        </Menu>\n\n        <div className=\"content-container\">\n          {activeItem === \"Basic Form\" && <Basic />}\n          {activeItem === \"With Validation\" && <Validation />}\n          {activeItem === \"Hooks\" && <Hooks />}\n          {activeItem === \"Formik\" && <FormikForm />}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport { init } from './core/data/api';\n\ninit();\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}